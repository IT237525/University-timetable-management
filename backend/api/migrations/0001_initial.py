# Generated by Django 4.2.7 on 2025-08-13 14:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('student', 'Student'), ('staff', 'Staff'), ('admin', 'Admin')], default='student', max_length=10)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminNotification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('new_comment', 'New Comment'), ('timetable_conflict', 'Timetable Conflict'), ('system_alert', 'System Alert'), ('user_request', 'User Request')], max_length=20)),
                ('reference_id', models.BigIntegerField(help_text='ID of the referenced object')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Admin Notification',
                'verbose_name_plural': 'Admin Notifications',
                'db_table': 'admin_notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='e.g., Y1S1, Y2S2', max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('academic_year', models.CharField(help_text='e.g., 2024-2025', max_length=9)),
                ('semester', models.CharField(choices=[('1', 'Semester 1'), ('2', 'Semester 2'), ('3', 'Semester 3')], max_length=1)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('weekday_start_time', models.TimeField(default='08:30:00')),
                ('weekday_end_time', models.TimeField(default='17:30:00')),
                ('weekend_start_time', models.TimeField(default='08:30:00')),
                ('weekend_end_time', models.TimeField(default='20:30:00')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Batch',
                'verbose_name_plural': 'Batches',
                'db_table': 'batches',
                'ordering': ['academic_year', 'semester', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('room_type', models.CharField(choices=[('classroom', 'Classroom'), ('laboratory', 'Laboratory'), ('lecture_hall', 'Lecture Hall'), ('tutorial_room', 'Tutorial Room')], default='classroom', max_length=20)),
                ('capacity', models.IntegerField(help_text='Maximum number of students')),
                ('building', models.CharField(blank=True, max_length=100, null=True)),
                ('floor', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Room',
                'verbose_name_plural': 'Rooms',
                'db_table': 'rooms',
                'ordering': ['building', 'floor', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(help_text='e.g., CS101, MATH201', max_length=20, unique=True)),
                ('lecture_duration', models.IntegerField(default=60, help_text='Duration in minutes (60-120)', validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(120)])),
                ('tutorial_duration', models.IntegerField(default=60, help_text='Duration in minutes (60-120)', validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(120)])),
                ('lab_duration', models.IntegerField(default=120, help_text='Duration in minutes (60-120)', validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(120)])),
                ('total_credits', models.IntegerField(default=3)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='api.batch')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'db_table': 'subjects',
                'ordering': ['code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('component_type', models.CharField(choices=[('lecture', 'Lecture'), ('tutorial', 'Tutorial'), ('lab', 'Lab')], max_length=10)),
                ('week_number', models.IntegerField(default=1, help_text='Week number for recurring schedules')),
                ('is_recurring', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='api.batch')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='timetables', to='api.room')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_schedule', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='api.subject')),
            ],
            options={
                'verbose_name': 'Timetable',
                'verbose_name_plural': 'Timetables',
                'db_table': 'timetables',
                'ordering': ['batch', 'day_of_week', 'start_time'],
                'unique_together': {('batch', 'day_of_week', 'start_time', 'component_type')},
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('rating', models.IntegerField(blank=True, help_text='Rating from 1 to 5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_approved', models.BooleanField(default=False, help_text='Admin approval for visibility')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment')),
                ('timetable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.timetable')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'db_table': 'comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('table_name', models.CharField(max_length=100)),
                ('record_id', models.BigIntegerField()),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout')], max_length=10)),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'db_table': 'audit_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='StaffAssignment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('assignment_type', models.CharField(choices=[('primary', 'Primary'), ('secondary', 'Secondary'), ('assistant', 'Assistant')], default='primary', max_length=10)),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_assignments', to='api.batch')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_assignments', to='api.subject')),
            ],
            options={
                'verbose_name': 'Staff Assignment',
                'verbose_name_plural': 'Staff Assignments',
                'db_table': 'staff_assignments',
                'ordering': ['staff', 'subject', 'batch'],
                'unique_together': {('staff', 'subject', 'batch')},
            },
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('availability_type', models.CharField(choices=[('weekday', 'Weekday'), ('weekend', 'Weekend'), ('both', 'Both')], max_length=10)),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Availability',
                'verbose_name_plural': 'Availability',
                'db_table': 'availability',
                'ordering': ['staff', 'day_of_week'],
                'unique_together': {('staff', 'day_of_week')},
            },
        ),
    ]
